from aiogram import Bot, types, Dispatcher
from aiogram.utils import executor
from aiogram import types
import wikipedia

wikipedia.set_lang("ru")

import re
import random
import asyncio
import logging
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig \
    (level=logging.DEBUG,
     filename='my_program_log.log',
     format='%(asctime)s - %(module)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s',
     datefmt='%H:%M:%S')

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = Bot(token=os.getenv('TOKEN'))
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏
f = open('funny_jokes.txt', 'r', encoding='UTF-8')
jokes = f.read().split('???')
f.close()
length_list_jokes = len(jokes)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–∫–∏
def get_ru_wiki(user_text):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–∫–∏
        page_info = wikipedia.page(user_text)
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—ã—Å—è—á—É —Å–∏–º–≤–æ–ª–æ–≤
        wikitext = page_info.content[:1000]
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
        wikimas = wikitext.split('.')
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        wikimas = wikimas[:-1]
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        wikitext2 = ''
        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –≥–¥–µ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ ¬´—Ä–∞–≤–Ω–æ¬ª (—Ç–æ –µ—Å—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        for x in wikimas:
            if not ('==' in x):
                # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –Ω–∞—à–µ–π –ø
                # –µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Ç–æ—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
                if (len((x.strip())) > 3):
                    wikitext2 = wikitext2 + x + '.'
            else:
                break
        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
        wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
        wikitext2 = re.sub('\{[^\{\}]*\}', '', wikitext2)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return wikitext2
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –º–æ–¥—É–ª—å wikipedia –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    except Exception as e:
        return '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º'


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def start_menu():
    builder = types.InlineKeyboardMarkup(row_width=1)
    button = [types.InlineKeyboardButton(text='–í–µ—Å–µ–ª—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã ü§£ü§£ü§£', callback_data='jokes'),
              types.InlineKeyboardButton(text='–£–º–Ω—ã–µ –º—ã—Å–ª–∏ üéìüéìüéì', callback_data='smart')]
    builder.add(*button)
    return builder


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=['start'])
async def reply_buider(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã \n–ß–µ–º —Ç–µ–±—è —Ä–∞–∑–≤–ª–µ—á—å?üòé', reply_markup=start_menu())


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /jokes
@dp.callback_query_handler(text='jokes')
async def call_hand_jokes(call: types.CallbackQuery):
    ran = random.randint(1, length_list_jokes - 1)
    await call.message.answer(jokes[ran])
    separator = 'üî•'
    await call.message.answer(separator * 12)
    await call.message.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? üòâ \n–ß–µ–º –µ—â–µ —Ç–µ–±—è —Ä–∞–∑–≤–ª–µ—á—å? üòé', reply_markup=start_menu())


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /smart
@dp.callback_query_handler(text='smart')
async def call_hand_smart(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –≤ Wikipedia')


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–∏–∫–∏–ø–µ–¥–∏–∏
@dp.message_handler()
async def answer_wiki(message: types.Message):
    await message.answer(get_ru_wiki(message.text))
    separator = 'üî•'
    await message.answer(separator * 12)
    await message.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? üòâ \n–ß–µ–º –µ—â–µ —Ç–µ–±—è —Ä–∞–∑–≤–ª–µ—á—å? üòé', reply_markup=start_menu())


# –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
executor.start_polling(dp, skip_updates=True)
